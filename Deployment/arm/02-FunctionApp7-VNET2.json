{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
     "_generator": {
      "name": "bicep",
      "version": "0.5.6.12127",
      "templateHash": "6481508276977979534"
     }
    },
    "parameters": {
      "appName": {
        "type": "string",
        "defaultValue": "[concat('fnapp', uniqueString(resourceGroup().id))]",
        "metadata": {
          "description": "The name of the function app that you wish to create."
        }
      },
      "storageAccountType": {
        "type": "string",
        "defaultValue": "Standard_LRS",
        "allowedValues": [
          "Standard_LRS",
          "Standard_GRS",
          "Standard_RAGRS"
        ],
        "metadata": {
          "description": "Storage Account type"
        }
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Location for all resources."
        }
      },
      "appInsightsLocation": {
        "type": "string",
        "defaultValue":"[resourceGroup().location]",
        "metadata": {
          "description": "Location for Application Insights"
        }
      },
      "StorageAccount_LandingContainer": {
        "type": "string",
        "metadata": {
          "description": "container that azure function will listen for waiting for files to arrive to start running"
        }
      },
      "StorageAccount_RawContainer": {
        "type": "string",
        "metadata": {
          "description": "Raw Container Name"
        }
      },
      "StorageAccount_StagingContainer": {
        "type": "string",
        "metadata": {
          "description": "Staging Container Name"
        }
      },
      "StorageAccount_CuratedContainer": {
        "type": "string",
        "metadata": {
          "description": "Cuarted Container Name"
        }
      },
      "StorageAccount_Name": {
        "type": "string",
        "metadata": {
          "description": "The name of Storage Account of MDD framework"
        }
      },
      "Synapse_Name": {
        "type": "string",
        "metadata": {
          "description": "The name synapse pf MDD framrwork"
        }
      },
      "Synapse_PoolName": {
        "type": "string",
        "metadata": {
          "description": "The name of of spark pool of MDD Framework"
        }
      },     
      "runtime": {
        "type": "string",
        "defaultValue": "python",
        "allowedValues": [
          "node",
          "dotnet",
          "java",
          "python"
        ],
        "metadata": {
          "description": "The language worker runtime to load in the function app."
        }
      },
      /*"vnetName": {
        "type": "string",
        "metadata": {
          "description": "The name of of VNET that this function app attached to"
        }
      },*/
      "VNETId": {
        "type": "string",
        "metadata": {
          "description": "The id of of VNET that this function app attached to"
        }
      },
      "FunctionOutbound": {
        "type": "string",
        "metadata": {
          "description": "The name of of function outbound that this function app uses for VNET Integration"
        }
      }  
    },
    "variables": {
      "functionAppName": "[parameters('appName')]",
      "StorageAccount_LandingContainer": "[parameters('StorageAccount_LandingContainer')]",
      "StorageAccount_RawContainer": "[parameters('StorageAccount_RawContainer')]",
      "StorageAccount_StagingContainer": "[parameters('StorageAccount_StagingContainer')]",
      "StorageAccount_CuratedContainer": "[parameters('StorageAccount_CuratedContainer')]",
      "MDDFStorageAccount_Name": "[parameters('StorageAccount_Name')]",
      "Synapse_Name": "[parameters('Synapse_Name')]",
      "Synapse_PoolName": "[parameters('Synapse_PoolName')]",
      "hostingPlanName": "[parameters('appName')]",
      "AFstorageAccountName": "[concat(uniquestring(resourceGroup().id), 'azfunctions')]",
      "functionWorkerRuntime": "[parameters('runtime')]"//,
      //"vnetAddressPrefix": "10.2.5.0/16",
      //"subnetAddressPrefix": "10.2.6.0/24"
    },
    "resources": [
    /*{
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-06-01",
      "name": "[parameters('vnetName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('FunctionOutbound')]",
            "properties": {
              "addressPrefix": "[variables('subnetAddressPrefix')]",
              "delegations": [
                {
                  "name": "delegation",
                  "properties": {
                    "serviceName": "Microsoft.Web/serverFarms"
                  }
                }
              ]
            }
          }
        ]
      }
    },*/
      {
        "type": "Microsoft.Storage/storageAccounts",
        "apiVersion": "2021-04-01",
        "name": "[variables('AFstorageAccountName')]",
        "location": "[parameters('location')]",
        "sku": {
          "name": "[parameters('storageAccountType')]"
        },
        "kind": "StorageV2"
      },
      {
        "type": "microsoft.insights/components",
        "apiVersion": "2020-02-02",
        "name": "[variables('functionAppName')]",
        "location": "[parameters('appInsightsLocation')]",
        "kind": "web",
        "properties": {
          "Application_Type": "web"
        }
      },
      {
        "type": "Microsoft.Web/serverfarms",
        "apiVersion": "2020-06-01",
        "name": "[variables('hostingPlanName')]",
        "location": "[parameters('location')]",
        "sku": {
          "name": "EP1",
          "tier": "ElasticPremium"
        },
        "kind": "elastic",
        "properties": {
          "maximumElasticWorkerCount": 20
        }
      },
      {
        "type": "Microsoft.Web/sites",
        "apiVersion": "2020-06-01",
        "name": "[variables('functionAppName')]",
        "location": "[parameters('location')]",
        "kind": "functionapp",
        "properties": {
          "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
          "siteConfig": {
            //"linuxFxVersion": "PYTHON|3.8",
            "numberOfWorkers": 1,
            "appSettings": [
              {
                "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                "value": "[reference(resourceId('Microsoft.Insights/components', variables('functionAppName'))).InstrumentationKey]"
              },
              {
                "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                "value": "[format('InstrumentationKey={0}', reference(resourceId('Microsoft.Insights/components', variables('functionAppName'))).InstrumentationKey)]"
              },
              {
                "name": "AzureWebJobsStorage",
                "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('AFstorageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('AFstorageAccountName')), '2021-04-01').keys[0].value)]"
              },
              {
                "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2};', variables('AFstorageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('AFstorageAccountName')), '2021-04-01').keys[0].value)]"
              },
              {
                "name": "MDDF_Storage",
                "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('MDDFStorageAccount_Name'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('MDDFStorageAccount_Name')), '2019-06-01').keys[0].value)]"
              },
              {
                "name": "WEBSITE_CONTENTSHARE",
                "value": "[toLower(variables('functionAppName'))]"
              },
              {
                "name": "FUNCTIONS_EXTENSION_VERSION",
                "value": "~4"
              },
              {
                "name": "PYTHON_ENABLE_WORKER_EXTENSIONS",
                "value": "1"
              },
              {
                "name": "FUNCTIONS_WORKER_RUNTIME",
                "value": "[variables('functionWorkerRuntime')]"
              },
              {
                "name": "StorageAccount_LandingContainer",
                "value": "[variables('StorageAccount_LandingContainer')]"
              },
              {
                "name": "StorageAccount_RawContainer",
                "value": "[variables('StorageAccount_RawContainer')]"
              },
              {
                "name": "StorageAccount_StagingContainer",
                "value": "[variables('StorageAccount_StagingContainer')]"
              },
              {
                "name": "StorageAccount_CuratedContainer",
                "value": "[variables('StorageAccount_CuratedContainer')]"
              },
              {
                "name": "StorageAccount_Name",
                "value": "[variables('MDDFStorageAccount_Name')]"
              },
              {
                "name": "Synapse_Name",
                "value": "[variables('Synapse_Name')]"
              },
              {
                "name": "Synapse_PoolName",
                "value": "[variables('Synapse_PoolName')]"
              },
              {
                "name": "FunctionApp_Name",
                "value": "[variables('functionAppName')]"
              }
            ]
          }
        },
        "dependsOn": [
          "[resourceId('Microsoft.Insights/components', variables('functionAppName'))]",
          "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
          "[resourceId('Microsoft.Storage/storageAccounts', variables('AFstorageAccountName'))]"//,
        //  "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
        ]
      },
      {
            "type": "Microsoft.Web/sites/virtualNetworkConnections",
            "apiVersion": "2022-03-01",
            //"name": "[concat(parameters('appName'), '/7336c275-1607-47c3-9c4e-3b4c538990d7_darwish-function-outbound')]",
            "name": "[concat(parameters('appName'), '/',uniqueString(resourceGroup().id),'_',parameters('FunctionOutbound'))]",
            "location": "Australia East",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('appName'))]"
            ],
            "properties": {
                "vnetResourceId": "[concat(parameters('VNETId'), '/subnets/',parameters('FunctionOutbound'))]",
                "isSwift": true
            }
       }
     /* {
        "type": "Microsoft.Web/sites/networkConfig",
        "apiVersion": "2020-06-01",
        "name": "[format('{0}/{1}', variables('functionAppName'), 'virtualNetwork')]",
        "properties": {
          "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('FunctionOutbound'))]",
          "swiftSupported": true
        },
        "dependsOn": [
          "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"//,
        //  "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
        ]
      }*/
    ]
  }
  
  